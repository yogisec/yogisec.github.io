<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aws on jellyparks</title><link>https://yogisec.github.com/test-website/aws/</link><description>Recent content in Aws on jellyparks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Nov 2018 15:14:39 +1000</lastBuildDate><atom:link href="https://yogisec.github.com/test-website/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>assumed_role_breadcrumbs</title><link>https://yogisec.github.com/test-website/aws/assumed-role-breadcrumbs/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://yogisec.github.com/test-website/aws/assumed-role-breadcrumbs/</guid><description>Cloudtrail events in AWS offer a lot of visibility into the calls that roles leverage within the platform. Sometimes tracking the original source of the activity can be challenging. When users and other aws services from one account assume role into another hunting the origin can take a bit of backtracking.
The Scenario Let&amp;rsquo;s set up a scenario, and work backwards through the logs. For this scenario we&amp;rsquo;ll pretend that we are alerted to an anomalous api call.</description></item><item><title>cloudtrail_anomaly_detection</title><link>https://yogisec.github.com/test-website/aws/cloudtrail-anomaly-detection/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://yogisec.github.com/test-website/aws/cloudtrail-anomaly-detection/</guid><description>This is going to be an ongoing post for awhile. It was inspired by Netflix&amp;rsquo;s skunkworks group who gave a talk at re:invent 2019 in regards to building a cloudtrail anomaly detection platform leveraging Amazon services. I highly recommend watching the talk.
I liked the idea, but not the deployment method netflix showcased. It didn&amp;rsquo;t scale to the size I needed it to (Looking at the final product in production now it probably would have, but I didn&amp;rsquo;t want to run and maintain an EC2 instnace).</description></item><item><title>emr_security_woes</title><link>https://yogisec.github.com/test-website/aws/emr-security-woes/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://yogisec.github.com/test-website/aws/emr-security-woes/</guid><description>I recently had the opportunity to dig deeper into the Elastic Map Reduce (EMR) service in AWS. According to the official Amazon docs (here) &amp;ldquo;&amp;hellip;EMR is a manged cluster platform that simlifies running big data frameworks&amp;hellip;&amp;rdquo; Full disclosure I have virtually zero experience with big data and big data platforms. The closest I&amp;rsquo;ve gotten to that space is storing data in S3 and searching it with Athena. Oh, I also sometimes search enterprise Splunk without specifying an index or sourcetype.</description></item><item><title>role_credential_revoking</title><link>https://yogisec.github.com/test-website/aws/role-credential-revoking/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://yogisec.github.com/test-website/aws/role-credential-revoking/</guid><description>The conversation came up about revoking credentials for a role associated which had ec2 instances associated with it. Does it impact the instance at all? When will the instance refresh its access keys? Is there just a blip in the EC2&amp;rsquo;s access to AWS API calls or is it unable to make calls until its keys TTL ends? These were all questions that we did not know the answer to.</description></item></channel></rss>