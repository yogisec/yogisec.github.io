<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome! on jellyparks</title><link>https://jellyparks.com/</link><description>Recent content in Welcome! on jellyparks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Nov 2018 15:14:39 +1000</lastBuildDate><atom:link href="https://jellyparks.com/index.xml" rel="self" type="application/rss+xml"/><item><title>about</title><link>https://jellyparks.com/me/about/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/me/about/</guid><description>My Current Work Primarily focused on driving changes in the SOC to better monitor and maintain our cloud security posture. Successfully built, tuned, and deployed an AWS cloud anomaly detection platform based on CloudTrail events. Built several other custom pieces of cloud content and automations. Integrated our SOAR platform with AWS environments to automate IR and Forensic capabilities. Mentor members of the security team to better understand the cloud and container spaces.</description></item><item><title>assumed_role_breadcrumbs</title><link>https://jellyparks.com/aws/assumed-role-breadcrumbs/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/aws/assumed-role-breadcrumbs/</guid><description>Cloudtrail events in AWS offer a lot of visibility into the calls that roles leverage within the platform. Sometimes tracking the original source of the activity can be challenging. When users and other aws services from one account assume role into another hunting the origin can take a bit of backtracking.
The Scenario Let&amp;rsquo;s set up a scenario, and work backwards through the logs. For this scenario we&amp;rsquo;ll pretend that we are alerted to an anomalous api call.</description></item><item><title>cloudtrail_anomaly_detection</title><link>https://jellyparks.com/aws/cloudtrail-anomaly-detection/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/aws/cloudtrail-anomaly-detection/</guid><description>This is going to be an ongoing post for awhile. It was inspired by Netflix&amp;rsquo;s skunkworks group who gave a talk at re:invent 2019 in regards to building a cloudtrail anomaly detection platform leveraging Amazon services. I highly recommend watching the talk.
I liked the idea, but not the deployment method netflix showcased. It didn&amp;rsquo;t scale to the size I needed it to (Looking at the final product in production now it probably would have, but I didn&amp;rsquo;t want to run and maintain an EC2 instnace).</description></item><item><title>codebuild_secrets</title><link>https://jellyparks.com/cloudgoat/codebuild-secrets/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/cloudgoat/codebuild-secrets/</guid><description>According to the official documentation for this scenario (here) the overall goal is &amp;ldquo;a pair of secret strings that are stored in a secure RDS database.&amp;rdquo;
Once the scenario creation process completes we are presented with a set of access keys for the user account &amp;lsquo;solo&amp;rsquo;.
Who are we? First lets make sure the credentials we have obtained are valid. We can do this with the following command:</description></item><item><title>ec2_ssrf</title><link>https://jellyparks.com/cloudgoat/ec2-ssrf/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/cloudgoat/ec2-ssrf/</guid><description>According to the official documentation for this scenario (here) the overall goal is to &amp;ldquo;Invoke the &amp;ldquo;cg-lambda-[ CloudGoat ID ]&amp;rdquo; Lambda function.&amp;rdquo;
Scenario Setup To get everything up we just have to run:
1 python3 cloudgoat.py create ec2_ssrf Once the build process compeletes we are provided with a set of credentials for the Solus user. We should validate that the credentials work. The get caller identity is a great command for this and is the equivilant to running whoami.</description></item><item><title>emr_security_woes</title><link>https://jellyparks.com/aws/emr-security-woes/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/aws/emr-security-woes/</guid><description>I recently had the opportunity to dig deeper into the Elastic Map Reduce (EMR) service in AWS. According to the official Amazon docs (here) &amp;ldquo;&amp;hellip;EMR is a manged cluster platform that simlifies running big data frameworks&amp;hellip;&amp;rdquo; Full disclosure I have virtually zero experience with big data and big data platforms. The closest I&amp;rsquo;ve gotten to that space is storing data in S3 and searching it with Athena. Oh, I also sometimes search enterprise Splunk without specifying an index or sourcetype.</description></item><item><title>iam_privesc_by_attachment</title><link>https://jellyparks.com/cloudgoat/iam-privesc-by-attachment/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/cloudgoat/iam-privesc-by-attachment/</guid><description>Once the scenario is creation process completes we are presented with a set of access keys for a user account &amp;lsquo;kerrigan&amp;rsquo;
whoami First lets make sure the credentials that we have obtained are valid:
1 aws sts get-caller-identity --profile xxx |jq Perfect, looks like the credentials work. Now, what can they do?
What can I do? Lets use pacu to brute force some permissions. We can do this by running:</description></item><item><title>iam_privesc_by_rollback</title><link>https://jellyparks.com/cloudgoat/iam-privesc-by-rollback/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/cloudgoat/iam-privesc-by-rollback/</guid><description>According to the official documentation for this scenario (here) the overall goal is to &amp;ldquo;Acquire full admin privileges.&amp;rdquo;
We can create the challenge by running
1 python3 cloudgoat.py create iam_privesc_by_rollback The build process will begin and when it finishes we will be provided with a set of credentials for the Raynor user account.
Raynor In the real world, we probably wouldn&amp;rsquo;t just be handed these credentials.</description></item><item><title>role_credential_revoking</title><link>https://jellyparks.com/aws/role-credential-revoking/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/aws/role-credential-revoking/</guid><description>The conversation came up about revoking credentials for a role associated which had ec2 instances associated with it. Does it impact the instance at all? When will the instance refresh its access keys? Is there just a blip in the EC2&amp;rsquo;s access to AWS API calls or is it unable to make calls until its keys TTL ends? These were all questions that we did not know the answer to.</description></item><item><title>saml_overview</title><link>https://jellyparks.com/web-things/saml-overview/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/web-things/saml-overview/</guid><description>What is it According to RFC7522 &amp;ldquo;the Security Assertion Markup Language (SAML) 2.0 is an XML-based framework that alllows identity and security information to be shared across security domains.&amp;rdquo; In a nutshell SAML provides a way to tell a web application you are who you say you are without having to maintain a user/password database within each web application users access. Instead the authentication occurs at a trusted identity provider (IDP) and authorization is left to the web application which people are trying to access once they authenticate with the IDP.</description></item><item><title>thing1!</title><link>https://jellyparks.com/thing1/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/thing1/</guid><description>More Markdown
First item Second item Third item Indented item Indented item Fourth item First item Second item Third item Indented item Indented item Fourth item so bold
italics can be used like this
Code 1 2 3 4 5 { &amp;#34;firstName&amp;#34;: &amp;#34;John&amp;#34;, &amp;#34;lastName&amp;#34;: &amp;#34;Smith&amp;#34;, &amp;#34;age&amp;#34;: 25 } Turn off line numbers:
{ &amp;#34;firstName&amp;#34;: &amp;#34;John&amp;#34;, &amp;#34;lastName&amp;#34;: &amp;#34;Smith&amp;#34;, &amp;#34;age&amp;#34;: 25 } How to highlight lines:</description></item><item><title>what_is_this</title><link>https://jellyparks.com/cloudgoat/what-is-this/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/cloudgoat/what-is-this/</guid><description>First CloudGoat was created by the RhinoSecurity Group.
What is CloudGoat? According to the github repo &amp;ldquo;CloudGoat is Rhino Security Labs' &amp;ldquo;Vulnerable by Design&amp;rdquo; AWS deployment tool.&amp;rdquo;
CloudGoat is a collection of terraform configuration files that when deployed create very specific, and very vulnerable aws environments.
The documentation in the repository walks through the setup process.
This tool removes the complexity of having to setup an environment. More importantly it provides and opportunity to blindly (mostly) work through the enumeration portion of an assessment</description></item><item><title>xss_ui_redressing</title><link>https://jellyparks.com/web-things/xss-ui-redressing/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/web-things/xss-ui-redressing/</guid><description>Moving Beyond alert(&amp;lsquo;xss&amp;rsquo;) Most people know all about making an alert box pop or getting a cookie sent to an external site with document.cookie. It makes since, it is easy to demo and for the most part makes for a great proof of concept.
Unfortunately these sometimes fail to showcase some of the more potentially devious outcomes from having a site that is vulnerable to XSS.
I recently came across a form of XSS that is called ui redressing.</description></item><item><title>Yogi's Vulnerable SAML app</title><link>https://jellyparks.com/web-things/vulnerable-saml-app/</link><pubDate>Wed, 28 Nov 2018 15:14:39 +1000</pubDate><guid>https://jellyparks.com/web-things/vulnerable-saml-app/</guid><description>What is this thing? I built this app because I wanted to better understand SAML and I wanted to know how to discover, exploit, and remediate vulnearbilities associated with implementations. I created an easily deployable docker environment here that can be spun up on a local machine in about 5 minutes. I also have instructions to split the deployment across multiple hosts.
This includes a fully functional IDP and a Service Provider.</description></item></channel></rss>